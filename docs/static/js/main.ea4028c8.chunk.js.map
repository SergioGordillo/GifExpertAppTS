{"version":3,"sources":["components/AddCategory.tsx","components/GifGridItem.tsx","helpers/getGifs.tsx","hooks/useFetchGifs.tsx","components/GifGrid.tsx","GifExpertApp.tsx","reportWebVitals.ts","index.tsx"],"names":["AddCategory","setInformation","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","information","type","onChange","target","value","className","GifGridItem","props","id","title","url","src","alt","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","setTimeout","GifGrid","setImages","useEffect","then","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kLAgCeA,MA7Bf,YAA4D,IAArCC,EAAoC,EAApCA,eAAoC,EACrBC,mBAAiB,IADI,mBAClDC,EADkD,KACtCC,EADsC,KAiBzD,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAe,SAACS,GAAD,OAA4BP,GAA5B,mBAA2CO,OAC1DN,EAAc,OAKhB,SACE,uBACEO,KAAK,OACLC,SAlBoB,SAACN,GACzBF,EAAcE,EAAEO,OAAOC,QAkBnBC,UAAU,UACVD,MAAOX,O,KCXAa,MAXf,SAAqBC,GACQA,EAAnBC,GADkC,IAC9BC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,IAEnB,OACE,sBAAKL,UAAU,yCAAf,UACE,qBAAKM,IAAKD,EAAKE,IAAKH,IACpB,4BAAIA,Q,uBCRGI,EAAO,uCAAG,WAAON,GAAP,yBAAAO,EAAA,6DACbd,EAAgBO,EAAhBP,YAEFU,EAHe,0FAG0EK,UAC7Ff,GAJmB,sBAMFgB,MAAMN,GANJ,cAMfO,EANe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAc,IAAD,EAClC,MAAO,CACLd,GAAIc,EAAId,GACRC,MAAOa,EAAIb,MACXC,IAAG,UAAEY,EAAIC,cAAN,aAAE,EAAYC,iBAAiBd,QAbjB,kBAiBdU,GAjBc,4CAAH,sDCEb,SAASK,IAAgB,IAAD,EAEHjC,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAJgB,mBAEtBC,EAFsB,KAEfC,EAFe,KAc7B,OAPAC,YAAW,WACPD,EAAS,CACPT,KAAM,GACNO,SAAS,MAEZ,KAEIC,EC2BMG,MA7Bf,SAAiBvB,GAAmC,IAC1CP,EAAgBO,EAAhBP,YADyC,EAGrBR,mBAA0B,IAHL,mBAG1C+B,EAH0C,KAGlCQ,EAHkC,KAKzCL,EAAYD,IAAZC,QAMR,OAJAM,qBAAU,WACRnB,EAAQ,CAAEb,gBAAeiC,KAAKF,KAC7B,CAAC/B,IAGF,qCACE,oBAAIK,UAAU,oCAAd,SAAmDL,IAElD0B,EACC,iDAEA,oFAEF,qBAAKrB,UAAU,YAAf,SACGkB,EAAOF,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAA0Bb,MAAOa,EAAIb,MAAOC,IAAKY,EAAIZ,KAAnCY,EAAId,aCbjB0B,MArBf,WAAyB,IAAD,EACgB1C,mBAAmB,CAAC,KADpC,mBACfQ,EADe,KACFT,EADE,KAGtB,OACE,qBAAKc,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gDAEA,cAAC,EAAD,CAAad,eAAgBA,IAC7B,uBAEA,6BACGS,EAAYqB,KAAI,SAACrB,GAChB,OAAO,cAAC,EAAD,CAA2BA,YAAaA,GAA1BA,cCHlBmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ea4028c8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { InformationProps } from \"../interfaces\";\r\n\r\nfunction AddCategory({ setInformation }: InformationProps) {\r\n  const [inputValue, setInputValue] = useState<string>(\"\");\r\n\r\n  const handleInputChange = (e: any) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e: any) => {\r\n    e.preventDefault(); //It avoids the page to load again when the form is submitted\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      //In order to avoid insert elements without text\r\n      setInformation((information: string[]) => [inputValue, ...information]);\r\n      setInputValue(\" \"); //Cleaning the textbar\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        onChange={handleInputChange}\r\n        className=\"textBar\"\r\n        value={inputValue}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddCategory;\r\n","import React, { useState } from \"react\";\r\nimport { GifsInterface } from \"./GifGrid\";\r\nimport \"../index.css\";\r\n\r\nfunction GifGridItem(props: GifsInterface) {\r\n  const { id, title, url } = props;\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGridItem;\r\n","import { GifGridProps } from \"../components/GifGrid\";\r\n\r\nexport const getGifs = async (props: GifGridProps) => {\r\n  const { information } = props;\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=ZU4UQwNBA4tp5s4h5b3dpaIdUo32jFQ2&q=${encodeURI(\r\n    information\r\n  )}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img: any) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"../index.css\";\r\n\r\nexport function useFetchGifs() {\r\n  \r\n  const [state, setState] = useState({\r\n      data: [],\r\n      loading: true \r\n  })\r\n\r\n  setTimeout(() => {\r\n      setState({\r\n        data: [],\r\n        loading: false \r\n      })\r\n  }, 3000);\r\n\r\n  return state;\r\n}\r\n\r\nexport default useFetchGifs;","import React, { useState, useEffect } from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport \"../index.css\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport interface GifGridProps {\r\n  information: string;\r\n}\r\n\r\nexport interface GifsInterface {\r\n  id?: string;\r\n  title?: string;\r\n  url?: string;\r\n}\r\n\r\nfunction GifGrid(props: GifGridProps): JSX.Element {\r\n  const { information } = props;\r\n\r\n  const [images, setImages] = useState<GifsInterface[]>([]);\r\n\r\n  const { loading } = useFetchGifs();\r\n\r\n  useEffect(() => {\r\n    getGifs({ information }).then(setImages);\r\n  }, [information]);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{information}</h3>\r\n\r\n      {loading ? (\r\n        <span>\"Cargando...\"</span>\r\n      ) : (\r\n        <span>\"Utiliza el buscador para encontrar m√°s gifs\"</span>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} title={img.title} url={img.url} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nfunction GifExpertApp() {\r\n  const [information, setInformation] = useState<string[]>([\"\"]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Gif Expert App</h1>\r\n\r\n        <AddCategory setInformation={setInformation} />\r\n        <hr />\r\n\r\n        <ol>\r\n          {information.map((information) => {\r\n            return <GifGrid key={information} information={information} />;\r\n          })}\r\n        </ol>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}